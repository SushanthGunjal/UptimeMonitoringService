// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package main is a generated GoMock package.
package main

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockReposController is a mock of ReposController interface
type MockReposController struct {
	ctrl     *gomock.Controller
	recorder *MockReposControllerMockRecorder
}

// MockReposControllerMockRecorder is the mock recorder for MockReposController
type MockReposControllerMockRecorder struct {
	mock *MockReposController
}

// NewMockReposController creates a new mock instance
func NewMockReposController(ctrl *gomock.Controller) *MockReposController {
	mock := &MockReposController{ctrl: ctrl}
	mock.recorder = &MockReposControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReposController) EXPECT() *MockReposControllerMockRecorder {
	return m.recorder
}

// databaseGet mocks base method
func (m *MockReposController) databaseGet(url *Urls) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "databaseGet", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// databaseGet indicates an expected call of databaseGet
func (mr *MockReposControllerMockRecorder) databaseGet(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "databaseGet", reflect.TypeOf((*MockReposController)(nil).databaseGet), url)
}

// databaseSave mocks base method
func (m *MockReposController) databaseSave(url *Urls, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "databaseSave", url, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// databaseSave indicates an expected call of databaseSave
func (mr *MockReposControllerMockRecorder) databaseSave(url, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "databaseSave", reflect.TypeOf((*MockReposController)(nil).databaseSave), url, id)
}

// databaseCreate mocks base method
func (m *MockReposController) databaseCreate(url *Urls) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "databaseCreate", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// databaseCreate indicates an expected call of databaseCreate
func (mr *MockReposControllerMockRecorder) databaseCreate(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "databaseCreate", reflect.TypeOf((*MockReposController)(nil).databaseCreate), url)
}

// databaseDelete mocks base method
func (m *MockReposController) databaseDelete(url *Urls, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "databaseDelete", url, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// databaseDelete indicates an expected call of databaseDelete
func (mr *MockReposControllerMockRecorder) databaseDelete(url, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "databaseDelete", reflect.TypeOf((*MockReposController)(nil).databaseDelete), url, id)
}
