// Code generated by MockGen. DO NOT EDIT.
// Source: database/repo.go

// Package database is a generated GoMock package.
package database

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryController is a mock of RepositoryController interface
type MockRepositoryController struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryControllerMockRecorder
}

// MockRepositoryControllerMockRecorder is the mock recorder for MockRepositoryController
type MockRepositoryControllerMockRecorder struct {
	mock *MockRepositoryController
}

// NewMockRepositoryController creates a new mock instance
func NewMockRepositoryController(ctrl *gomock.Controller) *MockRepositoryController {
	mock := &MockRepositoryController{ctrl: ctrl}
	mock.recorder = &MockRepositoryControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryController) EXPECT() *MockRepositoryControllerMockRecorder {
	return m.recorder
}

// DatabaseCreate mocks base method
func (m *MockRepositoryController) DatabaseCreate(url *Urls) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseCreate", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// DatabaseCreate indicates an expected call of DatabaseCreate
func (mr *MockRepositoryControllerMockRecorder) DatabaseCreate(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseCreate", reflect.TypeOf((*MockRepositoryController)(nil).DatabaseCreate), url)
}

// DatabaseGet mocks base method
func (m *MockRepositoryController) DatabaseGet(url *Urls) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseGet", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// DatabaseGet indicates an expected call of DatabaseGet
func (mr *MockRepositoryControllerMockRecorder) DatabaseGet(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseGet", reflect.TypeOf((*MockRepositoryController)(nil).DatabaseGet), url)
}

// DatabaseSave mocks base method
func (m *MockRepositoryController) DatabaseSave(url *Urls) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseSave", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// DatabaseSave indicates an expected call of DatabaseSave
func (mr *MockRepositoryControllerMockRecorder) DatabaseSave(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseSave", reflect.TypeOf((*MockRepositoryController)(nil).DatabaseSave), url)
}

// DatabaseDelete mocks base method
func (m *MockRepositoryController) DatabaseDelete(url *Urls) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseDelete", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// DatabaseDelete indicates an expected call of DatabaseDelete
func (mr *MockRepositoryControllerMockRecorder) DatabaseDelete(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseDelete", reflect.TypeOf((*MockRepositoryController)(nil).DatabaseDelete), url)
}

// MockHttpController is a mock of HttpController interface
type MockHttpController struct {
	ctrl     *gomock.Controller
	recorder *MockHttpControllerMockRecorder
}

// MockHttpControllerMockRecorder is the mock recorder for MockHttpController
type MockHttpControllerMockRecorder struct {
	mock *MockHttpController
}

// NewMockHttpController creates a new mock instance
func NewMockHttpController(ctrl *gomock.Controller) *MockHttpController {
	mock := &MockHttpController{ctrl: ctrl}
	mock.recorder = &MockHttpControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpController) EXPECT() *MockHttpControllerMockRecorder {
	return m.recorder
}

// MakeHTTPGetRequest mocks base method
func (m *MockHttpController) MakeHTTPGetRequest(crawlTimeout int, url string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeHTTPGetRequest", crawlTimeout, url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeHTTPGetRequest indicates an expected call of MakeHTTPGetRequest
func (mr *MockHttpControllerMockRecorder) MakeHTTPGetRequest(crawlTimeout, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeHTTPGetRequest", reflect.TypeOf((*MockHttpController)(nil).MakeHTTPGetRequest), crawlTimeout, url)
}
